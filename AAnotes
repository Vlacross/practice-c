overall great resource for C and other things (similar to geeks for geeks)
    https://www.studytonight.com/library/

List of C programs for practice
    https://www.studytonight.com/c/programs/



Completed Basic C-Programs: {
    Hello-world: simpleWorld2.c,
    Takin-input-from-user: taking_input.c,
    Find-ASCII-value: ascii_val.c,
    Using-gets()-function: gets.c,
    If-Else: if-else.c,
    Switch-Case: vowel_find.c,
    Checking-for-vowel: vowel_find.c,
    Reversing-Case-of-Char: reverseCase.c,

}

Completed C-Guide-Lessons: {
    1: "Overview of C Language",
    2: "Features of C",
    3: "",
}


Guide NOTES:
1- C is good starting language and is fast to compile and run.

2- C features :
    variety of datatypes
    fast & efficient
    portable
    easy to extend
    Modularity
    rich libraries

3- Parts of C program: {
    Pre-processor: "links header files; houses macros",
    Header-File: "Collection of builtin/ready-made functions; basic .h file is stdio.h",
    Function: " 'main()' function is body of each program; return type specified before declaration (ie: int main() {...; return 0})",
    Variables: "defined keywords used to handle values and behaviors",
    Statements-&-Expressions: "Statement are expression and more. They do things(ie: assingment); Expressions return something using defined computation",
    Comments: "single line comments started with '//' or multi-line comments surrounded with '/* ... */'"
}

4- Compile and Run C Program:
    run :
        cat > hello.c << EOF
            #include<stdio.h>
            int main()
            {
                printf("\nHello World!\n");
                exit 0;
            }
            EOF
    then run:
        gcc -o helloWorld hello.c
    
    Run program:
        ./helloWorld

5- C Language Basic Syntax Rules:
    How C-Language is specified/recognized is based on C "tokens"
        ie: the tokens of the line "printf("hello, World");"
        are: 'printf', '(', '"Hello, World"', ')', and ';' 

    Semicolon is used to mark the end of each line. If this is missing the compiler will throw an error.

    Comment symbols '//' & '/* */' are recognized by the compiler as text to not be compiled

    tips:
        c is case sensitive
        all c statements must end with a Semicolon
        whitespace is used to describe blanks and tabs
        whitespace is required between keywords and identifiers.

    Example structure:
        #include<stdio.h>
        int main()
        {
            printf("\nHello, you simple World.\n") ;
        }

6-  C Keywords:
        auto        double        int       struct
        break       else          long      Switch
        case        enum          register  typedef
        const       extern        return    union
        char        float         short     unsigned
        continue    for           signed    volatile
        default     goto          sizeof    void
        do          if            static    while

    C Identifiers - names given to constants/variables, functions, and user-data.
        -Can only have alphanumeric cshort hars and underscores (a-z)(A-Z)(_);
        -First char can only be a letter/alphebetic char;
        -Are case sensitive;
        -Cannot be a C Keyword;
        -Cannot conatin special chars;
    Example declaration:
        int customVar = "Some String";

    C Charsets:
        Letters(all alphebetic chars);
        Digits(0-9);
        Special chars(colon, semi-colon, period, underscore, ampersand, ...);
        White spaces

7-  Operators in C:
        -Arithmetic;
        -Relational;
        -Logical;
        -Bitwise;
        -Assignment;
        -Conditional;
        -Special;

        1) Arithmetic:
            [ +, -, *, /, %, ++, -- ];
        
        2) Relational:
            [ ==, !=, >, <, >=, <= ];
        3) Logical:
            [ &&, ||, ! ]
        4) Bitwise:
            [ &, |, ^, <<, >> ];

            Truth table for Bitwise &, |, and ^:
            a       b       a&b     a|b     a^b
            0       0       0       0       0
            0       1       0       1       1
            1       0       0       1       1
            1       1       1       1       0

            Shift Operator example:
                a =      0001000;
                b =      2;
                a << b = 0100000;
                a >> b = 0000010;

        5) Assignment:
            [ =, +=, -=, *=, /=, %= ];

        6) Conditional:
            [ ? : ];        /*<-- intentionally no comma between symbols. */
            
            Example Ternary:
                (expression or booleanVariable) ? "this is what returns if expression is true" : "this is what returns if expression is false";

        7) Special:
            [ sizeof, &, * ];
            sizeofe     returns the size of a variable;         sizeof(x) returns size of variable "x";
            &           returns the address of a variable;      &x; returns the address of variable "x";
            *           pointer to variable;                    *x; will be a pointer to variable "x";
            
8-  Data types in C:
    https://www.studytonight.com/c/datatype-in-c.php
    https://userweb.cs.txstate.edu/~js236/201112/cs1428/lecture3.pdf

        Data types are broken down into two types:
            1)Primary data types: fundamental data types - int, float, char, and void
            2)Derived data types: Primary datatypes twisted or grouped -- array, structure, union, and pointer

                                    Primary Data Type
        Character                   Interger                    float               Void
            char                signed      unsigned                float

            Signed char         int         int                     double

            Unsigned char       short int   short int               long double

                                long int    long int
        

        Type                                size                            Range
        
        Integer
            int or signed int               2                               -32,768 - 32,767
            unsigned int                    2                               0 - 65535
            short int /unsigned short int   1                               -128 - 127
            unsigned short int              1                               0 - 255
            long int/signed long in         4                               -2,147,483,648 - 2,147,483,647
            unsigneed long int              4                               0 - 4,294,967,295
        Floating
            Floating                        4                               3.4E-38  -  3.4E+38
            double                          8                               1.7E-308  -  1.7E+308
            long double                     10                               3.4E-4932 - 1.1E+4932
        Character
            char or signed char             1                               -128 - 127
            unsigned char                   1                               0 - 255
        Void
            void - means no value. Used to specify functions that return nothing.

        (NOTE: 
            e/E is often used in place of scientific notation
            e- is the inverted (divide by 10 instead of multiply by 10)
                1.7E+3 is the same as 1.7 * 10^3 == 1700
                +3.4e38 == 34000...000 (with 37 zeros)
                -3.4e-38 == .34000...000 (with 37 zeros)
                +3.4e38 == .000...034 (with 37 zeros)
                -3.4e38 == -.000...034 (with 37 zeros)
            Mantissa - The part of a logarithm that follows the decimal point (any digits to the right of the decimal)
                If 0.12345678901234567 is stored in a type float (which can store about 7 digits in its mantissa), it will get rounded to 0.1234568
                A type double can store about 15 digits in the mantissa, so it would be rounded to 0.1234567890123456 

        )

9-  Variables in C Language
        https://www.studytonight.com/c/variables-in-c.php
        